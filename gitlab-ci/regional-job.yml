# Dynamic Regional Jobs using GitLab Child Pipelines (Shell Version)
# This approach generates region-specific jobs dynamically based on REGIONS variable
# Uses pure shell script - no Node.js dependencies

# Job to generate dynamic pipeline configuration using shell
generate-regional-pipeline:
  stage: pre
  image: alpine:latest
  services: []
  before_script:
    - echo "Starting regional pipeline generation..."
  script:
    - |
      if [ -z "$REGIONS" ]; then
        echo "Error: No REGIONS environment variable found"
        echo "Example: REGIONS='th,sg,my,jp'"
        exit 1
      fi

      # Ensure 'hk' is present in REGIONS
      if [ "$DEV_PIPELINE" != "true" ]; then
        if ! echo ",$REGIONS," | grep -q ",hk,"; then
          REGIONS="$REGIONS,hk"
        fi
      fi

      echo "🚀 Generating pipeline for regions: $REGIONS"

      # Create the generated pipeline file
      cat > generated-regional-pipeline.yml << EOF
      # Auto-generated regional pipeline
      # Generated for regions: $REGIONS

      stages:
        - regional-build
        - regional-deploy

      EOF

      # Convert comma-separated regions to array (Alpine compatible)
      OLD_IFS="$IFS"
      IFS=','
      set -- $REGIONS
      IFS="$OLD_IFS"

      job_count=0

      for region in "$@"; do
        # Remove whitespace
        region=$(echo "$region" | tr -d ' ')

        if [ -n "$region" ]; then
          job_count=$((job_count + 2))

          # Generate build job
          cat >> generated-regional-pipeline.yml << EOF
      ${region}-build-docker:
        stage: regional-build
        image: docker:stable
        services:
          - docker:stable-dind
        variables:
          REGION_NAME: "$region"
        before_script:
          - echo \$GCP_SERVICE_ACCOUNT > /root/key.json
          - docker login -u _json_key --password-stdin https://asia.gcr.io < /root/key.json
          - rm -rf /root/key.json
        script:
          - echo "Building for region $region"
          - docker build --cache-from \$DOCKER_IMAGE_REPO:\$TAG-$region . -t \$DOCKER_IMAGE_REPO:\$TAG-$region --build-arg GIT_USERNAME="\$GIT_USERNAME" --build-arg GIT_PASSWORD="\$GIT_PASSWORD" --build-arg BUILD="\$BUILD" --build-arg CI_COMMIT_SHA="\$CI_COMMIT_SHA" --build-arg APP_ENV="\$APP_ENV" --build-arg REACT_APP_REGION="$region" --build-arg REGION="$region"

          - echo "Deploying for region $region"
          - docker push \$DOCKER_IMAGE_REPO:\$TAG-$region
          - |
            if [ -n "\$CI_COMMIT_TAG" ]; then
              docker tag \$DOCKER_IMAGE_REPO:\$TAG-$region \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG-$region
              docker push \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG-$region
            fi
          - |
            if [ "$region" = "hk" ]; then
              echo "Hong Kong region detected, pushing image without suffix"
              docker tag \$DOCKER_IMAGE_REPO:\$TAG-$region \$DOCKER_IMAGE_REPO:\$TAG
              docker push \$DOCKER_IMAGE_REPO:\$TAG
              if [ -n "\$CI_COMMIT_TAG" ]; then
                docker tag \$DOCKER_IMAGE_REPO:\$TAG-$region \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG
                docker push \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG
              fi
            fi
        rules:
          - if: '\$BUILD'

      EOF
        fi
      done

      echo "✅ Generated $job_count jobs for regions: $REGIONS"
      echo "📄 Pipeline written to: generated-regional-pipeline.yml"

      # Show the generated content for debugging
      echo "📋 Generated pipeline preview:"
      head -20 generated-regional-pipeline.yml
  artifacts:
    paths:
      - generated-regional-pipeline.yml
    expire_in: 1 hour
  rules:
    - if: '$REGIONS && $BUILD'

# Trigger the dynamically generated regional pipeline
trigger-regional-jobs:
  stage: pre
  needs:
    - generate-regional-pipeline
  trigger:
    include:
      - artifact: generated-regional-pipeline.yml
        job: generate-regional-pipeline
    strategy: depend
  rules:
    - if: '$REGIONS && $BUILD && $TAG && $DOCKER_IMAGE_REPO'

.update-digests-base:
  stage: pre
  variables:
    GIT_DEPTH: "0"
  script: |
    set -eu
    apk add --no-cache git curl skopeo findutils
    curl -fsSL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
    chmod +x /usr/local/bin/yq

    # 用 PAT 改 remote，避免 gitlab-ci-token

    git config --global user.name  "gitlab-ci"
    git config --global user.email "gitlab-ci@dimorder.com"
    git config --global --add safe.directory "$CI_PROJECT_DIR"
    git config --global credential.helper store
    printf "https://oauth2:%s@gitlab.com\n" "$GIT_PAT" > ~/.git-credential

    git remote set-url origin "https://oauth2:${GIT_PAT}@gitlab.com/${CI_PROJECT_PATH}.git"
    git push origin "HEAD:${CI_COMMIT_REF_NAME}"

    # 尋找 manifest（沿用你原本邏輯）
    pick_manifest() {
      for f in deployment.yaml deployment.yml deploy.yaml deploy.yml; do
        [ -f "$f" ] && { echo "$f"; return; }
      done
      root_glob="$(ls -1 deploy*.ya?ml 2>/dev/null | head -n1 || true)"
      [ -n "$root_glob" ] && { echo "$root_glob"; return; }
      found="$(find . -maxdepth 2 -mindepth 2 -type f \( -name 'deployment.ya?ml' -o -name 'deploy*.ya?ml' \) | head -n1 || true)"
      [ -n "$found" ] && { echo "$found"; return; }
      echo "ERROR: No manifest file found (deployment.yaml, deploy.yaml, etc.)"
      exit 1
    }

    MANIFEST="$(pick_manifest)"
    echo "Using manifest: $MANIFEST"

    if [ "${DEV_PIPELINE:-}" != "true" ]; then
      case ",${REGIONS}," in *",hk,"*) : ;; *) REGIONS="${REGIONS},hk" ;; esac
    fi

    # yq 會用到的環境變數：
    # MODE: auto / held
    # HOLD_SITES: 逗號分隔的 SimpleSite 名稱
    export MODE="${MODE:-auto}"
    export HOLD_SITES="${HOLD_SITES:-}"

    changed=0
    IFS=','

    SKOPEO_ARGS="${SKOPEO_CREDS:-}"

    for raw in $REGIONS; do
      region="$(echo "$raw" | xargs)"
      [ -n "$region" ] || continue

      image_ref="${DOCKER_IMAGE_REPO}:${TAG}-${region}"
      echo "Resolving digest for: ${image_ref}"
      digest="$(skopeo inspect ${SKOPEO_ARGS} --format '{{.Digest}}' "docker://${image_ref}")"
      [ -n "$digest" ] || { echo "ERROR: cannot resolve digest for ${image_ref}" >&2; exit 1; }
      echo "  -> digest: ${digest}"

      # names: 從 HOLD_SITES 變數轉成陣列（去前後空白）
      # selector:
      #   MODE=held -> 只選在 HOLD_SITES 裡的 SimpleSite
      #   MODE=auto -> 排除在 HOLD_SITES 裡的 SimpleSite
      yq -i '
        # 解析 HOLD_SITES 成陣列並去頭尾空白
        (strenv(HOLD_SITES) | select(. != "") | split(",") | map(sub("^\\s+|\\s+$"; ""))) // [] as $names
        # 先抓出當前資源名稱
        | (.metadata.name) as $n
        # 過濾要處理的文件
        | select(
            .kind == "SimpleSite" and
            (
              (env(MODE) == "held"     and ($names | any_c(. == $n))) or
              (env(MODE) != "held"     and ($names | all_c(. != $n)))
            )
          )
        # 寫入對應 region 的 digest
        | .spec.buildImages[strenv(region)] = strenv(digest)
      ' "$MANIFEST"

      changed=1
    done

    # ArgoCD repoURL & rapid
    yq -i 'select(.kind == "SimpleSite") .spec.argocd.repoURL = "git@gitlab.com:'"${CI_PROJECT_PATH}"'.git"' "$MANIFEST"
    if [ -z "${CI_COMMIT_TAG:-}" ]; then
      yq -i 'select(.kind == "SimpleSite") .spec.argocd.rapid = true' "$MANIFEST"
    else
      yq -i 'select(.kind == "SimpleSite") .spec.argocd.rapid = false' "$MANIFEST"
    fi

    if [ "$changed" -eq 1 ]; then
      git add "$MANIFEST"
      # 訊息依情境標示
      if [ "$MODE" = "held" ]; then
        git commit -m "chore(ci): release later sites -> write digests [skip ci]"
      else
        git commit -m "chore(ci): bump version (auto, excluding HOLD_SITES) [skip ci]"
      fi
      git push origin "HEAD:${CI_COMMIT_REF_NAME}"
      echo "Updated and pushed ${MANIFEST}"
    else
      echo "No changes to commit."
    fi

# -------------------------------------------------------
# 一般自動流程：會跳過 HOLD_SITES
# -------------------------------------------------------
update-rollout-digests:
  extends: .update-digests-base
  needs: [trigger-regional-jobs]
  variables:
    MODE: "auto"   # 關鍵：自動流程排除 HOLD_SITES
  rules:
    - if: '$REGIONS && $BUILD && $TAG && $DOCKER_IMAGE_REPO'
      exists:
        - deploy.yml
        - deployment.yaml
        - deploy.yaml
        - deployment.yml
    - when: never

# -------------------------------------------------------
# 手動釋出：只處理 HOLD_SITES 列表（release later）
# -------------------------------------------------------
release-later:
  extends: .update-digests-base
  needs: [trigger-regional-jobs]
  variables:
    MODE: "held"   # 關鍵：只處理 HOLD_SITES
  when: manual
  allow_failure: false
  rules:
    - if: '$REGIONS && $BUILD && $TAG && $DOCKER_IMAGE_REPO && $HOLD_SITES'
      exists:
        - deploy.yml
        - deployment.yaml
        - deploy.yaml
        - deployment.yml
