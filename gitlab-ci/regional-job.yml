# Dynamic Regional Jobs using GitLab Child Pipelines (Shell Version)
# This approach generates region-specific jobs dynamically based on REGIONS variable
# Uses pure shell script - no Node.js dependencies

# Job to generate dynamic pipeline configuration using shell
generate-regional-pipeline:
  stage: pre
  image: alpine:latest
  services: []
  before_script:
    - echo "Starting regional pipeline generation..."
  script:
    - |
      if [ -z "$REGIONS" ]; then
        echo "Error: No REGIONS environment variable found"
        echo "Example: REGIONS='th,sg,my,jp'"
        exit 1
      fi

      # Ensure 'hk' is present in REGIONS
      if [ "$DEV_PIPELINE" != "true" ]; then
        if ! echo ",$REGIONS," | grep -q ",hk,"; then
          REGIONS="$REGIONS,hk"
        fi
      fi

      echo "🚀 Generating pipeline for regions: $REGIONS"

      # Create the generated pipeline file
      cat > generated-regional-pipeline.yml << EOF
      # Auto-generated regional pipeline
      # Generated for regions: $REGIONS

      stages:
        - regional-build
        - regional-deploy

      EOF

      # Convert comma-separated regions to array (Alpine compatible)
      OLD_IFS="$IFS"
      IFS=','
      set -- $REGIONS
      IFS="$OLD_IFS"

      job_count=0

      for region in "$@"; do
        # Remove whitespace
        region=$(echo "$region" | tr -d ' ')

        if [ -n "$region" ]; then
          job_count=$((job_count + 2))

          # Generate build job
          cat >> generated-regional-pipeline.yml << EOF
      ${region}-web-build:
        stage: regional-build
        image: docker:stable
        services:
          - docker:stable-dind
        before_script:
          - echo \$GCP_SERVICE_ACCOUNT > /root/key.json
          - docker login -u _json_key --password-stdin https://asia.gcr.io < /root/key.json
          - rm -rf /root/key.json
        variables:
          REGION_NAME: "$region"
        script:
          - echo "Building for region $region"
          - docker pull \$DOCKER_IMAGE_REPO:\$TAG-$region || true
          - docker build --cache-from \$DOCKER_IMAGE_REPO:\$TAG-$region . -t \$DOCKER_IMAGE_REPO:\$TAG-$region --build-arg GIT_USERNAME="\$GIT_USERNAME" --build-arg GIT_PASSWORD="\$GIT_PASSWORD" --build-arg BUILD="\$BUILD" --build-arg CI_COMMIT_SHA="\$CI_COMMIT_SHA" --build-arg APP_ENV="\$APP_ENV" --build-arg REACT_APP_REGION="$region" --build-arg REGION="$region"
          - docker save \$DOCKER_IMAGE_REPO:\$TAG-$region > image-$region.tar
        artifacts:
          paths:
            - image-$region.tar
          expire_in: 1 hour
        rules:
          - if: '\$BUILD'

      ${region}-web-deploy:
        stage: regional-deploy
        image: docker:stable
        services:
          - docker:stable-dind
        before_script:
          - echo \$GCP_SERVICE_ACCOUNT > /root/key.json
          - docker login -u _json_key --password-stdin https://asia.gcr.io < /root/key.json
          - rm -rf /root/key.json
        variables:
          REGION_NAME: "$region"
        script:
          - echo "Deploying for region $region"
          - docker load < image-$region.tar
          - docker push \$DOCKER_IMAGE_REPO:\$TAG-$region
          - |
            if [ -n "\$CI_COMMIT_TAG" ]; then
              docker tag \$DOCKER_IMAGE_REPO:\$TAG-$region \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG-$region
              docker push \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG-$region
            fi
          - |
            if [ "$region" = "hk" ]; then
              echo "Hong Kong region detected, pushing image without suffix"
              docker tag \$DOCKER_IMAGE_REPO:\$TAG-$region \$DOCKER_IMAGE_REPO:\$TAG
              docker push \$DOCKER_IMAGE_REPO:\$TAG
              if [ -n "\$CI_COMMIT_TAG" ]; then
                docker tag \$DOCKER_IMAGE_REPO:\$TAG-$region \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG
                docker push \$DOCKER_IMAGE_REPO:\$CI_COMMIT_TAG
              fi
            fi
        needs:
          - ${region}-web-build
        rules:
          - if: '\$BUILD != null && \$BUILD != ""'

      EOF
        fi
      done

      echo "✅ Generated $job_count jobs for regions: $REGIONS"
      echo "📄 Pipeline written to: generated-regional-pipeline.yml"

      # Show the generated content for debugging
      echo "📋 Generated pipeline preview:"
      head -20 generated-regional-pipeline.yml
  artifacts:
    paths:
      - generated-regional-pipeline.yml
    expire_in: 1 hour
  rules:
    - if: '$REGIONS && $BUILD'

# Trigger the dynamically generated regional pipeline
trigger-regional-jobs:
  stage: pre
  needs:
    - generate-regional-pipeline
  trigger:
    include:
      - artifact: generated-regional-pipeline.yml
        job: generate-regional-pipeline
    strategy: depend
  rules:
    - if: '$REGIONS && $BUILD && $TAG && $DOCKER_IMAGE_REPO'

update-rollout-digests:
  stage: pre
  needs: [trigger-regional-jobs]
  variables:
    GIT_DEPTH: "0"
  script: |
    set -eu
    apk add --no-cache git curl skopeo findutils
    curl -fsSL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o /usr/local/bin/yq
    chmod +x /usr/local/bin/yq

    git config --global credential.helper store
    cat > ~/.git-credentials <<EOF
      https://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab.com
    EOF

    git config user.name  "gitlab-ci"
    git config user.email "gitlab-ci@dimorder.com"

    echo "Checking out branch: $CI_COMMIT_REF_NAME"
    git checkout -B "$CI_COMMIT_REF_NAME"

    # === 尋找 manifest 檔 ===
    pick_manifest() {
      for f in deployment.yaml deployment.yml deploy.yaml deploy.yml; do
        [ -f "$f" ] && { echo "$f"; return; }
      done
      root_glob="$(ls -1 deploy*.ya?ml 2>/dev/null | head -n1 || true)"
      [ -n "$root_glob" ] && { echo "$root_glob"; return; }
      found="$(find . -maxdepth 2 -mindepth 2 -type f \( -name 'deployment.ya?ml' -o -name 'deploy*.ya?ml' \) | head -n1 || true)"
      if [ -n "$found" ]; then
        echo "$found"
      else
        echo "ERROR: No manifest file found (deployment.yaml, deploy.yaml, etc.)"
        exit 1
      fi
    }

    MANIFEST="$(pick_manifest)"
    echo "Using manifest: $MANIFEST"

    # Ensure 'hk' is present in REGIONS
    if [ "${DEV_PIPELINE:-}" != "true" ]; then
      case ",${REGIONS}," in
        *",hk,"*) : ;;
        *) REGIONS="${REGIONS},hk" ;;
      esac
    fi

    changed=0
    IFS=','

    # 若需要 skopeo 認證，把旗標寫進 SKOPEO_ARGS（避免 bash 陣列）
    SKOPEO_ARGS="${SKOPEO_CREDS:-}"

    for raw in $REGIONS; do
      region="$(echo "$raw" | xargs)"
      [ -n "$region" ] || continue

      image_ref="${DOCKER_IMAGE_REPO}:${TAG}-${region}"
      echo "Resolving digest for: ${image_ref}"

      # 注意：ash 不支援 ${arr[@]}；這裡直接展開字串旗標
      digest="$(skopeo inspect ${SKOPEO_ARGS} --format '{{.Digest}}' "docker://${image_ref}")"
      if [ -z "$digest" ]; then
        echo "ERROR: cannot resolve digest for ${image_ref}" >&2
        exit 1
      fi
      echo "  -> digest: ${digest}"

      # 設定 buildImages.[region]
      yq -i 'select(.kind == "SimpleSite") .spec.buildImages.'"${region}"' = "'"${DOCKER_IMAGE_REPO}@${digest}"'"' "$MANIFEST"
      changed=1
    done

    # === 更新 ArgoCD repoURL（用 strenv 取 env，避免雙引號混亂） ===
    yq -i 'select(.kind == "SimpleSite") .spec.argocd.repoURL = strenv(CI_REPOSITORY_URL)' "$MANIFEST"

    # === rapid 布林值 ===
    if [ -z "${CI_COMMIT_TAG:-}" ]; then
      yq -i 'select(.kind == "SimpleSite") .spec.argocd.rapid = true' "$MANIFEST"
    else
      yq -i 'select(.kind == "SimpleSite") .spec.argocd.rapid = false' "$MANIFEST"
    fi

    if [ "$changed" -eq 1 ]; then
      git add "$MANIFEST"
      git commit -m "chore(ci): bump version [skip ci]"
      git push origin "$CI_COMMIT_REF_NAME"
      echo "Updated and pushed ${MANIFEST}"
    else
      echo "No changes to commit."
    fi
  rules:
    - if: '$REGIONS && $BUILD && $TAG && $DOCKER_IMAGE_REPO'
      exists:
        - deploy.yml
        - deployment.yaml
        - deploy.yaml
        - deployment.yml
    - when: never